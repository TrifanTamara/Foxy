@using Business.Wrappers;
@using System.Text;
@model VocabularWrapper

@{
    string typeStr;
    string classForWord = "";
}

<div class="row">
    <div class="col-xs-12 col-sm-6 col-md-9"></div>
    <div class="rounded-top col-xs-6 col-md-3 text-center shadow" id="vocabTitle">
        <p class="title-upper-box">@Model.VocabularType</p>
    </div>
</div>
<div class="row jumbotron jumbotron-fluid" id="jumbo" style="margin-bottom:3em!important">
    @{
        typeStr = "little-" + Model.VocabularType;
        if (Model.VocabularType.ToLower().Equals("word"))
        {
            classForWord = "word-name-box";
        }
    }
    <div class="col big-col">
        <div class="row">
            <div class="big-container">
                <div class="name-box rounded @typeStr @classForWord">
                    <p class="name-text .ja">
                        @Model.Name
                    </p>
                </div>

            </div>
            <div class="">
                <div class="main-meaning-div">
                    <p class="name-style">
                        @Model.MeaningsList[0]
                    </p>
                </div>
            </div>
            <div class="col">

            </div>
            <div class="col-2 align-self-end" style="width:4em!important;vertical-align:middle;text-align:center">
                <input id="toggle-heart" type="checkbox" onclick="favoriteChanged('@Model.Item.VocabularItemId','@Model.Item.Favorite')" />
                <label for="toggle-heart">❤</label>
            </div>
            @if (Model.Item.Favorite == true)
            {
                <script>
                    CheckHeart();
                </script>
            }

        </div>
        <div class="row meaning-row">

            <div class="col meaning-col">
                <p class="text-other-meaning">
                    All meanings
                </p>
                @for (int i = 0; i < Model.MeaningsList.Count(); ++i)
                {
                    <span class="badge badge-info meaning-badge">@Model.MeaningsList[i]</span>
                }
            </div>
        </div>
        <div class="row">

            <div class="col meaning-col">
                <p class="text-user-meaning">
                    User's synonyms
                </p>
                @for (int i = 0; i < Model.MeaningsList.Count(); ++i)
                {
                    <span class="badge badge-secondary user-meaning-badge">@Model.MeaningsList[i]</span>
                }
            </div>
        </div>
        @{
            string title = "";
            bool radical = false;
            if (Model.VocabularType.ToLower().Equals("radical"))
            {
                radical = true;
            }
            else if (Model.VocabularType.ToLower().Equals("kanji"))
            {
                title = "Radicals combination";
            }
            else
            {
                title = "Kanji components";

            }
        }
        @if (!radical)
        {
            <div class="row category-row">
                <div class="col categories-title-col">

                    <p class="title-categories">
                        @title
                    </p>
                    <div class="row" style="margin-left:5px;">
                        @for (int i = 0; i < Model.Components.Count(); ++i)
                        {
                            string color = "little-";
                            if (@Model.Components[i].Type == Data.Domain.Entities.TemplateItems.VocabularType.Radical)
                            {
                                color += "radical";

                            }
                            else
                            {
                                color += "kanji";
                            }
                            string meaningFirst = @Model.Components[i].Meaning.Split(";")[0];
                            string tooltip_style = "<p style=\"text-transform:capitalize;padding:1px; margin:0\">" + meaningFirst + "</p>";

                            <div class="mini-name-box rounded" data-toggle="tooltip" data-placement="top" data-html="true" title="@tooltip_style">
                                <div class="mini-name-text @color">
                                    @Model.Components[i].Name
                                </div>
                            </div>
                            if (i < Model.Components.Count() - 1)
                            {
                                <p class="" style="height:100%;vertical-align:middle;font-size:2em;margin-right:1vmin;opacity:0.8;">
                                    +
                                </p>
                            }
                        }
                    </div>

                </div>
            </div>
            <div class="row category-row">

                <div class="col categories-title-col">
                    @if (!radical)
                    {
                        string soundPath = Model.MainReading;
                        <p class="title-categories">
                            Reading
                        </p>
                        <div class="row" style="margin-left:5px;">
                            <div class="col">
                                <p style="opacity:0.9;font-size:1.1em!important;margin-bottom:3px">Main reading : </p>
                                <div class="badge badge-warning" style="font-size:1.3em!important;">
                                    <p style="margin-bottom:0!important;">
                                        @Model.MainReading
                                    </p>
                                </div>
                                <button type="button" class="btn btn-light border-dark" style="padding:0!important;width:2em!important; height:2em!important;position:absolute;vertical-align:middle;margin-left:7px!important; cursor:pointer!important" onclick="playSound()">
                                    <img src="~/img/octicons/svg/unmute.svg" style="position:relative!important;height:1.3em; width:1.3em;padding-bottom: 3px;" alt="*">
                                </button>
                                <audio id="audio" src="~/sounds/@(soundPath).mp3"></audio>
                            </div>
                            @if (@Model.OnyomiReading.Count() > 0)
                            {
                                <div class="col">
                                    <p style="opacity:0.6;font-size:1em!important;margin-bottom:3px">Onyomi reading : </p>
                                    @for (int j = 0; j < Model.OnyomiReading.Count; ++j)
                                    {
                                        <div class="badge badge-secondary" style="font-size:1.3em!important;font-weight:normal!important;margin-bottom:1px;">
                                            <p style="margin-bottom:0!important;">
                                                @Model.OnyomiReading[j]
                                            </p>
                                        </div>
                                    }
                                </div>
                            }
                            @if (@Model.KunyoumiReading.Count() > 0)
                            {
                                <div class="col">
                                    <p style="opacity:0.6;font-size:1em!important;margin-bottom:3px">Kunyomi reading : </p>
                                    @for (int j = 0; j < Model.KunyoumiReading.Count; ++j)
                                    {
                                        <div class="badge badge-secondary" style="font-size:1.3em!important;font-weight:normal!important;margin-bottom:1px;">
                                            <p style="margin-bottom:0!important;">
                                                @Model.KunyoumiReading[j]
                                            </p>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }

                </div>
            </div>
        }
        <div class="row category-row">

            <div class="col categories-title-col">
                <p class="title-categories">
                    Meaning mnemonic
                </p>
                <div class="col">
                    <div class="mnemonic-box">
                        @*<div class=" badge badge-secondary mnem-title">Default Menmonic</div>*@
                        <div class="text-mnem">
                            @Model.Template.MeaningMnemonic
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row mini-category-row">
            <div class="col categories-title-col">
                <div class="row mini-title-categories" style="position:relative!important">
                    <div class="">
                        <p style="display: inline;">
                            User's meaning note
                        </p>
                    </div>
                    <div class="">
                        <div id="editIconMeaning">
                            <button type="button" class="btn btn-light border-dark" style="padding:0!important;width:2em!important; height:2em!important;position:absolute;vertical-align:middle;margin-left:7px!important; cursor:pointer!important" onclick="ShowMeaningInput()">
                                <img src="~/img/octicons/svg/pencil.svg" style="position:relative!important;height:1.3em; width:1.3em;padding-bottom: 3px;" alt="*">
                            </button>
                        </div>
                    </div>

                    <div>
                        <div class="input-group input-group-sm mb-3" id="input-meaning">
                            <input type="text" class="form-control" id="meaningUserInput" placeholder="Reading note.." aria-label="Recipient's username" aria-describedby="basic-addon2">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" onclick="RefreshMeaningDiv('@Model.Item.VocabularItemId.ToString()')">Save</button>
                                <button class="btn btn-outline-secondary" type="button" onclick="HideMeaningDiv()">Discard</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col" style="margin-bottom:1em">

                    <div class="row text-mnem">
                        <div class="col">
                            <div class="mnemonic-box">
                                <div id="opertionExecute">
                                </div>
                                <div class="text-mnem" id="meaning-note">

                                    @Model.Item.MeaningNote
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @if (!radical)
        {
            <div class="row category-row">

                <div class="col categories-title-col">
                    <p class="title-categories">
                        Reading mnemonic
                    </p>
                    <div class="col">
                        <div class="mnemonic-box">
                            <div class="text-mnem">
                                @Model.Template.ReadingMnemonic
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row mini-category-row">
                <div class="col categories-title-col">
                    <div class="row mini-title-categories" style="position:relative!important">
                        <div class="">
                            <p style="display: inline;">
                                User's reading note
                            </p>
                        </div>
                        <div class="">
                            <div id="editIconReading">
                                <button type="button" class="btn btn-light border-dark" style="padding:0!important;width:2em!important; height:2em!important;position:absolute;vertical-align:middle;margin-left:7px!important; cursor:pointer!important" onclick="ShowReadingInput()">
                                    <img src="~/img/octicons/svg/pencil.svg" style="position:relative!important;height:1.3em; width:1.3em;padding-bottom: 3px;" alt="*">
                                </button>
                            </div>
                        </div>
                        <div>
                            <div class="input-group input-group-sm mb-3" id="input-reading">
                                <input type="text" class="form-control" id="readingUserInput" placeholder="Reading note.." aria-label="Recipient's username" aria-describedby="basic-addon2">
                                <div class="input-group-append">
                                    <button class="btn btn-outline-secondary" type="button" onclick="RefreshReadingDiv('@Model.Item.VocabularItemId.ToString()')">Save</button>
                                    <button class="btn btn-outline-secondary" type="button" onclick="RefreshDiv()">Discard</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col" style="margin-bottom:1em">

                        <div class="row text-mnem">
                            <div class="col">
                                <div class="mnemonic-box">
                                    <div class="text-mnem" id="reading-note">
                                        @Model.Item.ReadingNote
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
